from .. import loader
from telethon import events
from time import time
from .. import utils
import speech_recognition as sr
from pydub import AudioSegment
import asyncio

@loader.tds
class VoiceToTextMod(loader.Module):
    strings = {"name": "Voice To Text"}

    async def recognize(self, event):
        msg = await event.reply('<code>üó£ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...</code>')
        try:
            filename = "/tmp/" + str(time()).replace('.', '')
            await event.download_media(file=filename + '.ogg')
            song = AudioSegment.from_ogg(filename + '.ogg')
            song.export(filename + '.wav', format="wav")
            await msg.edit('<code>üó£ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</code>')
            r = sr.Recognizer()
            with sr.AudioFile(filename + '.wav') as source:
                audio_data = r.record(source)
                text = r.recognize_google(audio_data, language='ru-RU')
                await msg.edit('<b>üëÜ –¢–µ–∫—Å—Ç —ç—Ç–æ–≥–æ –≤–æ–π—Å–∞:</b>\n<pre>' + text + '</pre>')
        except:
            await msg.delete()

    @loader.owner
    async def voicycmd(self, message):
        reply = await message.get_reply_message()
        if not reply.media or not reply.media.document.attributes[0].voice:
            await message.edit('üó£ <b>–í–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>')
            await asyncio.sleep(2)
            await message.delete()

        await self.recognize(reply)

    @loader.owner
    async def watcher(self, event):
        if not event.media or not event.media.document.attributes[0].voice:
            return

        await self.recognize(event)
